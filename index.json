[{"content":"Welcome to the short micro-series introducing the different operators arising when using Go\u0026rsquo;s 5 main types. The first set of types that we\u0026rsquo;ll be looking at is the numeric types: Integers, Floats and Complexes. Typically used for either counting or maths, numeric types act in ways that you will be very familiar with from any basic maths class, in addition to having some more programming-friendly features.\nBasic Arithmetic Operations We\u0026rsquo;ll be beginning this whistlestop tour with a list of the most common and familiar operators we use for numbers. All of the following operators work with all Integers, Floats and Complexes:\n   Operator Usage Description     + num1 + num2 Basic addition operation   - num1 - num2 Basic subtraction operation   * num1 * num2 Basic multiplication operation   / num1 / num2 Basic division operation (num2 = 0 results in \u0026lsquo;division by zero\u0026rsquo; error)   % num1 % num2 Modulo operation returns the remainder when num1 is divided by num2   ++ num1++ Increment operation increases value by 1.\n(Complex numbers have their real part incremented)   -- num-- Decrement operation decreases value by 1.\n(Complex numbers have their real part decremented)    Compound Assignment Operators In Go, we also have the possibility to combine an assignment and the five basic operators:+,-,*,/and%. These combined operators are structured by appending an equals sign to the right hand side of these symbols. We can then use these compound assignment operators to assign a variable the value of the operation with variable acting as \u0026lsquo;num1\u0026rsquo;. As an example:\n1 2 3  var num int = 3 num += 3   would result in ournumvariable being equal to 6 (3 + 3). The same applies to the four other basic operators.\nComplex Arithmetic Far from being confusing, complex arithmetic is simply arithmetic that deals with complex numbers. In Go, there are a two basic operations that are unique to complex types and, in a way, these are just queries to the components of the complex number:\n   Operator Description     real(num) Gets the real part of the number (returns float64)   imag(num) Gets the imaginary part of the number (returns float64)    What Next? That\u0026rsquo;s all of the basic numeric operators necessary to craft the many other functions that you\u0026rsquo;ll be coming across in your time programming in Go. They may seem simple, but they are, in fact incredibly powerful too.\nIn the next post in this microseries, we\u0026rsquo;ll be investigating Booleans and how we can leverage them to make decisions in our programs.\n","description":"Working with Go's numeric types","id":0,"section":"posts","tags":["Go","Beginner"],"title":"Go: Beginner 4.1 - Numbers","uri":"https://magpieprogramming.com/posts/go/beginner/go.-4.1-numbers/"},{"content":"As promised in the last intallment of Go: Beginners, we are going to be addressing the topic of variables in Go. Variables are present in almost all modern programming languages and allow us as programmers to store data and use that data over and over in interesting ways. Variables can be descriptors (like body height, age or name) or could be there just to help (hold this while I do this other thing).\nDeclaring Variables There are two main ways to set up a variable in Go. These methods make use of the following syntax:\n1 2 3 4 5  var x int = 5 \u0026lt;OR\u0026gt; x := 5   The first of these variable declarations is much more flexible than the second. First off, the first statement can be placed anywhere you want to put it. Second, this statement can be written without either the assignment (= 5) or the type declaration (int). This is in contrast to the second variable declaration that can only be written into function bodies and must appear as is written here (\u0026lt;variable_name\u0026gt; := \u0026lt;value\u0026gt;).\nSo, breaking apart the first statement, we start with the var keyword, telling Go that we are now naming a new variable. Then we name the variable. This name can be anything, so long as it follows some rules. Variable names must not:\n Contain symbols other than the underscore character (_) Start with a number Exceed 255 characters in length  Optionally, we can then add the type of variable we want to declare. These types are taken from the 19 options discussed in our last post. This is definitely best practice if we intend to use the variable throughout a lot of code, but you may not need to enforce a type if you are only using it briefly.\nFinally and again optionally, we assign the variable a value, which must be of the type you have declared (if you\u0026rsquo;ve given one). If you haven\u0026rsquo;t given a type, the variable will now be the type inferred from any value you\u0026rsquo;ve assigned to it. You can have a play around with this in conjunction with our last tutorial.\nWhat\u0026rsquo;s more, you can even declare multiple variables at the same time:\n1 2 3 4 5  var x, y int = 5, 9 \u0026lt;OR\u0026gt; x, y := 5, 9   We just have to comma-separate the variable names and the values we want to assign to them. As before, the value assignment is optional in the first statement. All these comma-separated variables are given the type at the end of their list.\nUsing Variables We\u0026rsquo;ve now got these variables storing all our interesting data, so how on Earth are we supposed to use them? It\u0026rsquo;s actually really easy, just replace any raw data you would have used before with the variable names. Let\u0026rsquo;s rewrite our \u0026ldquo;Hello, Go\u0026rdquo; example with variables instead:\n1 2 3 4 5 6 7 8 9  package main import \u0026#34;fmt\u0026#34; var ourText string = \u0026#34;Hello, Go (Now with variables!)\u0026#34; func main(){ fmt.Println(ourText) }   Run this and you should see much the same as we\u0026rsquo;ve had before, except now it\u0026rsquo;s drawing all that text straight from our new variable. Exactly what we wanted!\nYou can go ahead and try this with the various ways of declaring our variables we\u0026rsquo;ve talked about or even with different values and types.\nDefault Variable Values We said before that the longer variable declaration statement doesn\u0026rsquo;t have to have a value assignment. So, if we call a variable before we\u0026rsquo;ve given it a value, we should get some sort of error, right? Well, Go really doesn\u0026rsquo;t like variables having no values and so, if you don\u0026rsquo;t give them values, it\u0026rsquo;ll give them some values itself.\nWhat values? Strangely, we have a handy short table for just that question:\n   Type Default     Integers 0   Floats 0   Complexes (0 + 0i)   Booleans false   Strings \u0026quot;\u0026rdquo; (a.k.a \u0026lsquo;the empty string\u0026rsquo;)    If we try printing, or doing anything else to, a variable without assigning a value, this is what we get. Feel free to try this for yourself!\nWhat Next? After getting to grips with variables and how we can use them, the logical next step is to get to know how we can make them do more interesting things and work together. To that end, we\u0026rsquo;ll be giving a short mini-series on working with the different types, before moving on to defining our own functions and getting these variables to do our bidding!\nContinue to Go: Beginner 4.1 - Numbers\n","description":"Setting and using our own variables","id":1,"section":"posts","tags":["Go","Beginner"],"title":"Go: Beginner 3 - Variables","uri":"https://magpieprogramming.com/posts/go/beginner/go.-3-variables/"},{"content":"Following on from our previous \u0026ldquo;Hello World\u0026rdquo; tutorial, the next order of business to addres is types. Types are exactly \u0026lsquo;what it says on the tin\u0026rsquo;. Types are what the data we give to the program should be seen as, whether that be a number, text or a multitude of other possibilities.\nOfficially, Go has 4 main types of type\u0026hellip; Sounds confusing, but for now, we only need to know about one of these: the basic type. As they self-proclaim, these types are, well, basic and will make up over 80% of all the types you use. Let\u0026rsquo;s have a look at all of these \u0026lsquo;basic\u0026rsquo; types and see if we can unpack each in turn.\nBasic Types To be precise, Go has 19 basic types baked into the language, but many of these are variations of only 5 general types. These are: Integers, Floats, Complexes, Booleans and Strings. And to help things further, Integers, Floats \u0026amp; Complexes are all just numbers of different sorts.\nIntegers Integers are all the whole numbers, as you would count on a number line or when counting discrete objects (think 1, 2 \u0026amp; 42). These are one of the simplest data types in Go and one of the most used types as well. Integers are often defined using the keywork \u0026ldquo;int\u0026rdquo;, which we will touch on later.\nFor now we can have a look at the type by using the following short code snippet in our \u0026lsquo;run.go\u0026rsquo; file:\n1 2 3 4 5 6 7 8  package main import \u0026#34;fmt\u0026#34; import \u0026#34;reflect\u0026#34; func main() { fmt.Println(reflect.TypeOf(42)) }   Running that file should demonstrate that 42 is an example of the \u0026lsquo;int\u0026rsquo; type and this what you should see printed to the terminal. Going back to these elusive 19 basic types, there are, in fact 13 different types of int, many of which are very underused. These are:\n   Type Description     int8 Signed 8-bit Integer   int16 Signed 16-bit Integer   int32 Signed 32-bit Integer   int64 Signed 64-bit Integer   uint8 Unsigned 8-bit Integer   uint16 Unsigned 16-bit Integer   uint32 Unsigned 32-bit Integer   uint64 Unsigned 64-bit Integer   int 32 or 64-bit Signed Integer (OS Dependent)   uint 32 or 64-bit Unsigned Integer (OS Dependent)   rune int32 Unicode Representation   byte ~int8   uintptr uint representing a pointer value    Floats Floats are all decimal numbers and are very useful when we are doing more complicated maths. These fill the void where Integers cannot represent decimals, but are inherently less precise than Integers when using them as whole numbers. For the reasoning behind this, Tom Scott gives a great explanation in this Computerphile video.\nSo, getting back to our code, we can replace our \u0026lsquo;Println\u0026rsquo; line with the following:\n1 2 3  \u0026lt;...\u0026gt; fmt.Println(reflect.TypeOf(9.81)) \u0026lt;...\u0026gt;   Now, similar to the table of Integer types above, we won\u0026rsquo;t actually seeing \u0026lsquo;float\u0026rsquo;. Instead, we most likely see \u0026lsquo;float64\u0026rsquo;. This is because Go does not have a general \u0026lsquo;float\u0026rsquo; type, but instead has \u0026lsquo;float64\u0026rsquo; and \u0026lsquo;float128\u0026rsquo;, which are simply 64- and 128-bit representations of these decimal numbers.\nComplexes Complexes are where things get a bit more maths-heavy for those who are not familiar with complex number notation. As a brief introduction, in standard maths, we are told that there is no solution to the equation:\n\r\rBut, in fact, we can make a solution and create a value such that x = i. This is an example of an \u0026lsquo;imaginary\u0026rsquo; number and when combined with our \u0026lsquo;real\u0026rsquo; numbers, we obtain a collective complex number. These are numbers like (2 + 3i) and (-9i). These types can be seen if you replace our \u0026lsquo;Println\u0026rsquo; statement with:\n1 2 3  \u0026lt;...\u0026gt; fmt.Println(reflect.TypeOf(2 + 3i)) \u0026lt;...\u0026gt;   From the result, like with our float example, you can see that there is no general \u0026lsquo;complex\u0026rsquo; type, but instead there are \u0026lsquo;complex64\u0026rsquo; and \u0026lsquo;complex128\u0026rsquo; types, with 64 and 128 bits respectively. Unless you are planning on working with some interesting maths or coming up with more elegant solutions to problems, it is unlikely you\u0026rsquo;ll need to work with Complex types on a daily (or even weekly) basis.\nBooleans Booleans are by far the most simple data types in nearly all programming languages: True or False. The simplest and, quite elegantly, the most useful type you will use when programming in Go and in general, named by the keyword \u0026lsquo;bool\u0026rsquo; in Go. There are, as above, only two possible values for a bool: \u0026lsquo;true\u0026rsquo; or \u0026lsquo;false\u0026rsquo;, and we can quickly test those:\n1 2 3 4  \u0026lt;...\u0026gt; fmt.Println(reflect.TypeOf(true)) fmt.Println(reflect.TypeOf(false)) \u0026lt;...\u0026gt;   Two bools. Nothing special or any confusing numbers here, just plain \u0026lsquo;bool\u0026rsquo; and you\u0026rsquo;ll be glad to hear that\u0026rsquo;s all there is.\nStrings Strings are, for all intents and purposes in Go, text. Whether that be a block of text spanning the entire works of Shakespeare or a single word, it is always encapsulated by the Go\u0026rsquo;s \u0026lsquo;string\u0026rsquo; type. And as in many other languages, \u0026lsquo;string\u0026rsquo; type data is always surrounded by speech marks (\u0026quot;\u0026quot;). This just tells Go where to expect all the text you are giving it. Let\u0026rsquo;s try this out:\n1 2 3  \u0026lt;...\u0026gt; fmt.Println(reflect.TypeOf(\u0026#34;Steve walks warily down the street\u0026#34;)) \u0026lt;...\u0026gt;   As with \u0026lsquo;bool\u0026rsquo; types, you\u0026rsquo;ll notice it\u0026rsquo;s just a \u0026lsquo;string\u0026rsquo; type. Nothing more, nothing less. Strings are strings no matter their length or the words inside them.\nWhat Next? That\u0026rsquo;s your lot of basic types in Go and almost all of the types you\u0026rsquo;ll be using on a minute-by-minute basis. There\u0026rsquo;s plenty more to learn about how these different types will act around each other and by themselves, but for now, we know how to add this data to our program. All we need is to find out how to use them in some useful way.\nTo do this, next time, we\u0026rsquo;ll be introducing variables which are how we store all of this data and a way we can change and use it \u0026lsquo;on-the-fly\u0026rsquo;.\nContinue to Go: Beginner 3 - Variables\n","description":"Getting acquainted with Go's basic data types","id":2,"section":"posts","tags":["Go","Beginner"],"title":"Go: Beginner 2 - Types","uri":"https://magpieprogramming.com/posts/go/beginner/go.-2-types/"},{"content":"In order to complete this tutorial, it is expected that you have a working Go programming environment. If you are still needing to set this up, you can follow along with our tutorial here if you are using Windows or using the official Go Docs for other operating systems.\nOur First Program In this tutorial, we\u0026rsquo;re going to be writing our very first Go program and understanding what exactly it all means. For those coming directly from our setup article, we\u0026rsquo;ll be working with the run.go file created there. Regardless of where you might have come from, let\u0026rsquo;s take a quick look at all the code in this file and then we can break it down:\n1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Go\u0026#34;) }   package main The first line in our program is not particularly groundbreaking, but it is an important point nevertheless. Go programs are broken into what it calls \u0026ldquo;packages\u0026rdquo;. These packages tell the compiler where to look for various things including data structures, other packages and, in our case, functions. this first line assigns our new run.go file as part of the package named \u0026ldquo;main\u0026rdquo;. This package is rather special as files in this package are where Go will always look to start off our program.\nimport \u0026ldquo;fmt\u0026rdquo; Having now spoken about packages, let\u0026rsquo;s start using them; the import statement is how we tell our program that we are going to be using something from a specific package. In this case we are using the very useful and common packagefmtwhich deals with a lot of Go\u0026rsquo;s reading and writing. It\u0026rsquo;s worth noting that \u0026ldquo;fmt\u0026rdquo; is an example of an in-built package that comes pre-installed with Go and so can be looked up in the docs at https://golang.org/pkg/fmt/. In fact, you can see all the available Go packages at https://golang.org/pkg/.\nfunc main() { This line is an example of one of the most important concepts in programming, functions. Functions in programming typically take some number of inputs (sometimes zero) and does something, gives some output or both. Specifically, we are defining a new function named \u0026ldquo;main\u0026rdquo;. Those of you coming from other programming languages may realise some syntactic differences in defining functions in Go. In particular, you will realise that all functions must begin with a \u0026lsquo;{\u0026rsquo; symbol and end in a \u0026lsquo;}\u0026rsquo; (as there is on the last line).\nThe main function is particularly important because, as in many other languages, when paired with a file in the \u0026ldquo;main\u0026rdquo; package, this is the default starting point when we go to run our code. In other words, this is what will run in your code. Unless you call other functions, with the exception of few other functions, this is all your program will do.\nfmt.Println(\u0026ldquo;Hello, Go\u0026rdquo;) So, what do we want our program to do? Well, as we have this juicy \u0026ldquo;fmt\u0026rdquo; package loaded, let\u0026rsquo;s make use of it. To start with, we\u0026rsquo;ll just print a nice message saying \u0026ldquo;Hello, Go\u0026rdquo;.\nWe can use functions in the fmt package, by appending a.followed by the name of the function we are calling. In our example, we\u0026rsquo;re calling the \u0026ldquo;Println\u0026rdquo; function that, according to the docs, will write any text we give it to the terminal and start a new line for us. Great!\nTo add extra difficulty to the syntactic differences for those coming from other languages, it is very important that you follow capitalisation precisely in Go. If you use the elusive \u0026ldquo;println\u0026rdquo; function, you will quickly find that this is \u0026lsquo;undefined\u0026rsquo; and \u0026lsquo;unexported\u0026rsquo;. We\u0026rsquo;ll explain this means in more detail later, but in short, whenever you want to use something not immediately in the package you\u0026rsquo;re working on, we have to start it with a capital letter. Println not println! The Result There we have it, our first program. Make sure you save that file and then we can run it using the methods you have learned previously (For those who followed the setup post, you just need to double click your build.bat).\nWhat do we see? Well, with any luck you\u0026rsquo;re seeing our short but sweet message of \u0026ldquo;Hello, Go\u0026rdquo; appearing on your terminal, like so:\nOur Result\r\r\rThere we go! Hopefully, at this point, you are confident that you understand what we have just done and why we have done it. This is the first step when anyone is learning a programming language and after a few more articles you\u0026rsquo;ll be able to look back and see just how far you\u0026rsquo;ve come so quickly.\nNext time we\u0026rsquo;ll be introducing the basic data types Go has to offer and all the different forms they come in.\nContinue to Go: Beginner 2 - Types\n","description":"Programming and understanding your first Go program","id":3,"section":"posts","tags":["Go","Beginner"],"title":"Go: Beginner 1 - Hello World","uri":"https://magpieprogramming.com/posts/go/beginner/go.-1-hello-world/"},{"content":"So, you\u0026rsquo;ve decided to begin learning Go, but you\u0026rsquo;re not too sure how to get started. Maybe you\u0026rsquo;ve gone through the \u0026ldquo;A Tour of Go\u0026rdquo; but now you want to set up your own environment for you own machine. Well, in the sections below you can find out how to do just that and get ready to start programming your own projects.\nThe following is applicable to Windows installations, but similar instructions may be found in the official Go Docs for other operating systems.\nDownloading and Installing The first thing we need to get started are some download files. The Go Windows installer file (.msi) can be found at the following URL:\nhttps://golang.org/dl/\nOnce downloaded, run this file and make a mental note of where the Go files have been stored in your system (Without any change, this should be C:\\Go by default).\nWith the installation complete, you should be able to open up a cmd or Powershell terminal and use the following commands:\n\u0026gt; go version\n\u0026gt; go env\nHaving run \u0026ldquo;go env\u0026rdquo;, you should find that GOROOT is equal to the installation directory for Go.\nIf that isn\u0026rsquo;t the case, you may need to manually change this using the \u0026ldquo;go env -w GOROOT=\u0026lt;Directory Path\u0026gt;\u0026rdquo; command.\nIf the command wasn\u0026rsquo;t recognised, you may need to manually go into the environment variables (Settings / System and Security / System / Advanced System Settings / Environment Variables) and add the install directory\u0026rsquo;s bin folder to the system PATH variable. Restart your terminal and the commands should now work Creating a Go Workspace To create your new Go workspace we first need to create a folder to have it in. You can make this anywhere and call it anything you like.\nThis folder is where we\u0026rsquo;re going to store all of our projects in neat folders. Let\u0026rsquo;s try making one now to test that everything is installed and working as expected. You should have the following directory sturcture for each project we create:\nGo Workspace\r\rProject └─── build └─── out └─── pkg └─── res └─── src └─── main \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"415f844305ea2a7b\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r The main folder can be renamed to anything you like, but for all of our projects, this is where our code to be run is going to be placed. Let\u0026rsquo;s make that file now by adding a .go file to main, which I\u0026rsquo;ve named run.go.\nMaking our Go Builder Now, Go is what is known in the business as a compiled language. That is, the computer cannot actually understand raw Go code and needs a translator to help. This is what we\u0026rsquo;ll be using to make our programs and run them in a consistent way.\nIn our \u0026ldquo;build\u0026rdquo; folder, we make a new text file named \u0026ldquo;build.bat\u0026rdquo; and place the following code inside it, replacing \u0026lsquo;main\u0026rsquo; and \u0026lsquo;run\u0026rsquo; as appropriate for you:\n1 2 3 4 5  SET GOPATH=%cd%\\.. :again go run ../src/main/run.go set /p response=Rerun? if \u0026#34;%response%\u0026#34; equ \u0026#34;\u0026#34; cls \u0026amp; goto again   Testing Our Installation Now we\u0026rsquo;re ready to start running some Go code, you can go ahead and place the following code into your \u0026ldquo;run.go\u0026rdquo; file:\n1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Go\u0026#34;) }   Finally, just double click on your build.bat file.\nIf everything has gone to plan, you should now see the words \u0026ldquo;Hello, Go\u0026rdquo; appearing at the top of your command terminal that has appeared. You can also simply press enter to re-run the code.\nCongratulations, you\u0026rsquo;ve just successfully installed Go and run your first program, taking your first, somewhat arduous steps into working with this exciting language. Don\u0026rsquo;t worry, setting up your environment is easily one of the most unintuitive parts of working with Go. It may not seem like much, but it won\u0026rsquo;t be long now before you\u0026rsquo;re programming like a pro!\nIf you\u0026rsquo;d like to get started immediately, we have a \u0026lsquo;Go: Beginner\u0026rsquo; series on the site that consists of a number of in-depth follow-along tutorials outlining the basics of Go. The first of these tutorials can be found at the following link:\nGo: Beginner 1 - Hello World\nOtherwise, if you have any questions, are experiencing issues setting up your Go environment or have an idea for a project you\u0026rsquo;d like to see, feel free to send us a message or email through any of the methods outlined on the about page or site footer. We\u0026rsquo;ll do our best to help you in any way we can.\n","description":"How to set up your own Go environment on Windows","id":4,"section":"posts","tags":["Go","Setup","Beginner"],"title":"Getting Set Up With Go","uri":"https://magpieprogramming.com/posts/go/beginner/go-setup/"},{"content":"What is Magpie Programming? Magpie Programming is a programming blog focusing on providing follow-along material through which you can learn new languages, become hardened veterans of their more obscure features and develop useful and interesting projects with all you\u0026rsquo;ve learned.\nThese projects vary massively in duration and difficulty, from a short 30-minute introductory command-line tool, through to series-length tutorials with the ability to make a program your own through further reading sidenotes.\nWhich Languages? Although longer projects on the blog will be focused on specific languages due to development constraints, we aim to produce various tutorials in the following languages:\n Go Java Python  How can I keep up to date? You can keep up to date by following us on Twitter \u0026amp; Github. If you\u0026rsquo;re into RSS feeds, go ahead an use our RSS feed link to stay up to date.\nGetting in touch Whether there\u0026rsquo;s something we\u0026rsquo;ve missed, something you\u0026rsquo;d like to see or need to get in touch for any reason, please do let us know by contacting us at magpieprogramming@gmail.com or any other social media outlets around the site.\n","description":"","id":5,"section":"","tags":null,"title":"About","uri":"https://magpieprogramming.com/about/"}]
[{"content":"In order to complete this tutorial, it is expected that you have a working Go programming environment. If you are still needing to set this up, you can follow along with our tutorial here if you are using Windows or using the official Go Docs for other operating systems.\nOur First Program In this tutorial, we\u0026rsquo;re going to be writing our very first Go program and understanding what exactly it all means. For those coming directly from our setup article, we\u0026rsquo;ll be working with the run.go file created there. Regardless of where you might have come from, let\u0026rsquo;s take a quick look at all the code in this file and then we can break it down:\n1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Go\u0026#34;) }   package main The first line in our program is not particularly groundbreaking, but it is an important point nevertheless. Go programs are broken into what it calls \u0026ldquo;packages\u0026rdquo;. These packages tell the compiler where to look for various things including data structures, other packages and, in our case, functions. this first line assigns our new run.go file as part of the package named \u0026ldquo;main\u0026rdquo;. This package is rather special as files in this package are where Go will always look to start off our program.\nimport \u0026ldquo;fmt\u0026rdquo; Having now spoken about packages, let\u0026rsquo;s start using them; the import statement is how we tell our program that we are going to be using something from a specific package. In this case we are using the very useful and common packagefmtwhich deals with a lot of Go\u0026rsquo;s reading and writing. It\u0026rsquo;s worth noting that \u0026ldquo;fmt\u0026rdquo; is an example of an in-built package that comes pre-installed with Go and so can be looked up in the docs at https://golang.org/pkg/fmt/. In fact, you can see all the available Go packages at https://golang.org/pkg/.\nfunc main() { This line is an example of one of the most important concepts in programming, functions. Functions in programming typically take some number of inputs (sometimes zero) and does something, gives some output or both. Specifically, we are defining a new function named \u0026ldquo;main\u0026rdquo;. Those of you coming from other programming languages may realise some syntactic differences in defining functions in Go. In particular, you will realise that all functions must begin with a \u0026lsquo;{\u0026rsquo; symbol and end in a \u0026lsquo;}\u0026rsquo; (as there is on the last line).\nThe main function is particularly important because, as in many other languages, when paired with a file in the \u0026ldquo;main\u0026rdquo; package, this is the default starting point when we go to run our code. In other words, this is what will run in your code. Unless you call other functions, with the exception of few other functions, this is all your program will do.\nfmt.Println(\u0026ldquo;Hello, Go\u0026rdquo;) So, what do we want our program to do? Well, as we have this juicy \u0026ldquo;fmt\u0026rdquo; package loaded, let\u0026rsquo;s make use of it. To start with, we\u0026rsquo;ll just print a nice message saying \u0026ldquo;Hello, Go\u0026rdquo;.\nWe can use functions in the fmt package, by appending a.followed by the name of the function we are calling. In our example, we\u0026rsquo;re calling the \u0026ldquo;Println\u0026rdquo; function that, according to the docs, will write any text we give it to the terminal and start a new line for us. Great!\nTo add extra difficulty to the syntactic differences for those coming from other languages, it is very important that you follow capitalisation precisely in Go. If you use the elusive \u0026ldquo;println\u0026rdquo; function, you will quickly find that this is \u0026lsquo;undefined\u0026rsquo; and \u0026lsquo;unexported\u0026rsquo;. We\u0026rsquo;ll explain this means in more detail later, but in short, whenever you want to use something not immediately in the package you\u0026rsquo;re working on, we have to start it with a capital letter. Println not println! The Result There we have it, our first program. Make sure you save that file and then we can run it using the methods you have learned previously (For those who followed the setup post, you just need to double click your build.bat).\nWhat do we see? Well, with any luck you\u0026rsquo;re seeing our short but sweet message of \u0026ldquo;Hello, Go\u0026rdquo; appearing on your terminal, like so:\nOur Result\r\r\rThere we go! Hopefully, at this point, you are confident that you understand what we have just done and why we have done it. This is the first step when anyone is learning a programming language and after a few more articles you\u0026rsquo;ll be able to look back and see just how far you\u0026rsquo;ve come so quickly.\n","description":"Programming and understanding your first Go program","id":0,"section":"posts","tags":["Go","Beginner"],"title":"Go: Beginner 1 - Hello World","uri":"https://magpieprogramming.com/posts/go/beginner/go.-1-hello-world/"},{"content":"So, you\u0026rsquo;ve decided to begin learning Go, but you\u0026rsquo;re not too sure how to get started. Maybe you\u0026rsquo;ve gone through the \u0026ldquo;A Tour of Go\u0026rdquo; but now you want to set up your own environment for you own machine. Well, in the sections below you can find out how to do just that and get ready to start programming your own projects.\nThe following is applicable to Windows installations, but similar instructions may be found in the official Go Docs for other operating systems.\nDownloading and Installing The first thing we need to get started are some download files. The Go Windows installer file (.msi) can be found at the following URL:\nhttps://golang.org/dl/\nOnce downloaded, run this file and make a mental note of where the Go files have been stored in your system (Without any change, this should be C:\\Go by default).\nWith the installation complete, you should be able to open up a cmd or Powershell terminal and use the following commands:\n\u0026gt; go version\n\u0026gt; go env\nHaving run \u0026ldquo;go env\u0026rdquo;, you should find that GOROOT is equal to the installation directory for Go.\nIf that isn\u0026rsquo;t the case, you may need to manually change this using the \u0026ldquo;go env -w GOROOT=\u0026lt;Directory Path\u0026gt;\u0026rdquo; command.\nIf the command wasn\u0026rsquo;t recognised, you may need to manually go into the environment variables (Settings / System and Security / System / Advanced System Settings / Environment Variables) and add the install directory\u0026rsquo;s bin folder to the system PATH variable. Restart your terminal and the commands should now work Creating a Go Workspace To create your new Go workspace we first need to create a folder to have it in. You can make this anywhere and call it anything you like.\nThis folder is where we\u0026rsquo;re going to store all of our projects in neat folders. Let\u0026rsquo;s try making one now to test that everything is installed and working as expected. You should have the following directory sturcture for each project we create:\nGo Workspace\r\rProject └─── build └─── out └─── pkg └─── res └─── src └─── main \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"415f844305ea2a7b\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r The main folder can be renamed to anything you like, but for all of our projects, this is where our code to be run is going to be placed. Let\u0026rsquo;s make that file now by adding a .go file to main, which I\u0026rsquo;ve named run.go.\nMaking our Go Builder Now, Go is what is known in the business as a compiled language. That is, the computer cannot actually understand raw Go code and needs a translator to help. This is what we\u0026rsquo;ll be using to make our programs and run them in a consistent way.\nIn our \u0026ldquo;build\u0026rdquo; folder, we make a new text file named \u0026ldquo;build.bat\u0026rdquo; and place the following code inside it, replacing \u0026lsquo;main\u0026rsquo; and \u0026lsquo;run\u0026rsquo; as appropriate for you:\n1 2 3 4 5  SET GOPATH=%cd%\\.. :again go run ../src/main/run.go set /p response=Rerun? if \u0026#34;%response%\u0026#34; equ \u0026#34;\u0026#34; cls \u0026amp; goto again   Testing Our Installation Now we\u0026rsquo;re ready to start running some Go code, you can go ahead and place the following code into your \u0026ldquo;run.go\u0026rdquo; file:\n1 2 3 4 5 6 7  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, Go\u0026#34;) }   Finally, just double click on your build.bat file.\nIf everything has gone to plan, you should now see the words \u0026ldquo;Hello, Go\u0026rdquo; appearing at the top of your command terminal that has appeared. You can also simply press enter to re-run the code.\nCongratulations, you\u0026rsquo;ve just successfully installed Go and run your first program, taking your first, somewhat arduous steps into working with this exciting language. Don\u0026rsquo;t worry, setting up your environment is easily one of the most unintuitive parts of working with Go. It may not seem like much, but it won\u0026rsquo;t be long now before you\u0026rsquo;re programming like a pro!\nIf you\u0026rsquo;d like to get started immediately, we have a \u0026lsquo;Go: Beginner\u0026rsquo; series on the site that consists of a number of in-depth follow-along tutorials outlining the basics of Go. The first of these tutorials can be found at the following link:\nGo: Beginner 1 - Hello World\nOtherwise, if you have any questions, are experiencing issues setting up your Go environment or have an idea for a project you\u0026rsquo;d like to see, feel free to send us a message or email through any of the methods outlined on the about page or site footer. We\u0026rsquo;ll do our best to help you in any way we can.\n","description":"How to set up your own Go environment on Windows","id":1,"section":"posts","tags":["Go","Setup","Beginner"],"title":"Getting Set Up With Go","uri":"https://magpieprogramming.com/posts/go/beginner/go-setup/"},{"content":"What is Magpie Programming? Magpie Programming is a programming blog focusing on providing follow-along material through which you can learn new languages, become hardened veterans of their more obscure features and develop useful and interesting projects with all you\u0026rsquo;ve learned.\nThese projects vary massively in duration and difficulty, from a short 30-minute introductory command-line tool, through to series-length tutorials with the ability to make a program your own through further reading sidenotes.\nWhich Languages? Although longer projects on the blog will be focused on specific languages due to development constraints, we aim to produce various tutorials in the following languages:\n Go Java Python  How can I keep up to date? You can keep up to date by following us on Twitter \u0026amp; Github. If you\u0026rsquo;re into RSS feeds, go ahead an use our RSS feed link to stay up to date.\nGetting in touch Whether there\u0026rsquo;s something we\u0026rsquo;ve missed, something you\u0026rsquo;d like to see or need to get in touch for any reason, please do let us know by contacting us at magpieprogramming@gmail.com or any other social media outlets around the site.\n","description":"","id":2,"section":"","tags":null,"title":"About","uri":"https://magpieprogramming.com/about/"}]